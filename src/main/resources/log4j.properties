#定义LOG输出级别
#INFO为级别，Console，File为日志输出目的地
log4j.rootLogger=INFO,Console,File
#定义日志输出目的地为控制台
log4j.appender.Console=org.apache.log4j.ConsoleAppender
log4j.appender.Console.Target=System.out
#可以灵活地指定日志输出格式，下面一行是指定具体的格式
#   %c 输出类目(哪个类)
#   %m 输出代码中的指定信息
#   %n 回车换行符
#   %p 输出优先级(什么INFO,DEBUG,ERROR什么的)
#   %r 从启动到这条日志打印时所耗费的时间(计时)
#   %t 输出线程名
#   %d 输出时间（可以指定格式，像下面一样  yyyy-MM-dd HH:mm:ss这样）
#   %l 输出位置，包括类名，发生的线程，以及代码行数 举例：Test.main(Test.java:2)
#   org.apache.log4j.PatternLayout 代表灵活格式
log4j.appender.Console.layout = org.apache.log4j.PatternLayout
log4j.appender.Console.layout.ConversionPattern=[%c] - %m%n

#文件大小到达指定尺寸的时候产生一个新的文件
log4j.appender.File = org.apache.log4j.RollingFileAppender
#指定输出目录
log4j.appender.File.File = logs/ssm.log
#定义文件最大大小
log4j.appender.File.MaxFileSize = 10MB
# 输出所有日志，如果换成DEBUG表示输出DEBUG以上级别日志   一共有七级，详见https://blog.csdn.net/hancst/article/details/78729999
log4j.appender.File.Threshold = DEBUG
log4j.appender.File.layout = org.apache.log4j.PatternLayout
log4j.appender.File.layout.ConversionPattern =[%p] [%d{yyyy-MM-dd HH\:mm\:ss}][%c]%m%n
